// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: messages.proto

package messages

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OMS_ServiceClient is the client API for OMS_Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OMS_ServiceClient interface {
	// Continente Manda un Nombre
	MandarNombre(ctx context.Context, in *Nombre, opts ...grpc.CallOption) (*Confirmar, error)
	// Onu Pide Muertos o Infectados, recibe cadena de msgs
	PedirAfligido(ctx context.Context, in *Opcion, opts ...grpc.CallOption) (OMS_Service_PedirAfligidoClient, error)
}

type oMS_ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOMS_ServiceClient(cc grpc.ClientConnInterface) OMS_ServiceClient {
	return &oMS_ServiceClient{cc}
}

func (c *oMS_ServiceClient) MandarNombre(ctx context.Context, in *Nombre, opts ...grpc.CallOption) (*Confirmar, error) {
	out := new(Confirmar)
	err := c.cc.Invoke(ctx, "/OMS_Service/MandarNombre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oMS_ServiceClient) PedirAfligido(ctx context.Context, in *Opcion, opts ...grpc.CallOption) (OMS_Service_PedirAfligidoClient, error) {
	stream, err := c.cc.NewStream(ctx, &OMS_Service_ServiceDesc.Streams[0], "/OMS_Service/PedirAfligido", opts...)
	if err != nil {
		return nil, err
	}
	x := &oMS_ServicePedirAfligidoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OMS_Service_PedirAfligidoClient interface {
	Recv() (*Nombre, error)
	grpc.ClientStream
}

type oMS_ServicePedirAfligidoClient struct {
	grpc.ClientStream
}

func (x *oMS_ServicePedirAfligidoClient) Recv() (*Nombre, error) {
	m := new(Nombre)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OMS_ServiceServer is the server API for OMS_Service service.
// All implementations must embed UnimplementedOMS_ServiceServer
// for forward compatibility
type OMS_ServiceServer interface {
	// Continente Manda un Nombre
	MandarNombre(context.Context, *Nombre) (*Confirmar, error)
	// Onu Pide Muertos o Infectados, recibe cadena de msgs
	PedirAfligido(*Opcion, OMS_Service_PedirAfligidoServer) error
	mustEmbedUnimplementedOMS_ServiceServer()
}

// UnimplementedOMS_ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOMS_ServiceServer struct {
}

func (UnimplementedOMS_ServiceServer) MandarNombre(context.Context, *Nombre) (*Confirmar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MandarNombre not implemented")
}
func (UnimplementedOMS_ServiceServer) PedirAfligido(*Opcion, OMS_Service_PedirAfligidoServer) error {
	return status.Errorf(codes.Unimplemented, "method PedirAfligido not implemented")
}
func (UnimplementedOMS_ServiceServer) mustEmbedUnimplementedOMS_ServiceServer() {}

// UnsafeOMS_ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OMS_ServiceServer will
// result in compilation errors.
type UnsafeOMS_ServiceServer interface {
	mustEmbedUnimplementedOMS_ServiceServer()
}

func RegisterOMS_ServiceServer(s grpc.ServiceRegistrar, srv OMS_ServiceServer) {
	s.RegisterService(&OMS_Service_ServiceDesc, srv)
}

func _OMS_Service_MandarNombre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nombre)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OMS_ServiceServer).MandarNombre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OMS_Service/MandarNombre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OMS_ServiceServer).MandarNombre(ctx, req.(*Nombre))
	}
	return interceptor(ctx, in, info, handler)
}

func _OMS_Service_PedirAfligido_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Opcion)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OMS_ServiceServer).PedirAfligido(m, &oMS_ServicePedirAfligidoServer{stream})
}

type OMS_Service_PedirAfligidoServer interface {
	Send(*Nombre) error
	grpc.ServerStream
}

type oMS_ServicePedirAfligidoServer struct {
	grpc.ServerStream
}

func (x *oMS_ServicePedirAfligidoServer) Send(m *Nombre) error {
	return x.ServerStream.SendMsg(m)
}

// OMS_Service_ServiceDesc is the grpc.ServiceDesc for OMS_Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OMS_Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OMS_Service",
	HandlerType: (*OMS_ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MandarNombre",
			Handler:    _OMS_Service_MandarNombre_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PedirAfligido",
			Handler:       _OMS_Service_PedirAfligido_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "messages.proto",
}

// DataNode_ServiceClient is the client API for DataNode_Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataNode_ServiceClient interface {
	// OMS Manda tupla (id, nombre)
	MandarId(ctx context.Context, in *TuplaId, opts ...grpc.CallOption) (*Confirmar, error)
	// OMS solicita nombre segun id
	SolicitarNombre(ctx context.Context, in *Identificador, opts ...grpc.CallOption) (*Nombre, error)
}

type dataNode_ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataNode_ServiceClient(cc grpc.ClientConnInterface) DataNode_ServiceClient {
	return &dataNode_ServiceClient{cc}
}

func (c *dataNode_ServiceClient) MandarId(ctx context.Context, in *TuplaId, opts ...grpc.CallOption) (*Confirmar, error) {
	out := new(Confirmar)
	err := c.cc.Invoke(ctx, "/DataNode_Service/MandarId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNode_ServiceClient) SolicitarNombre(ctx context.Context, in *Identificador, opts ...grpc.CallOption) (*Nombre, error) {
	out := new(Nombre)
	err := c.cc.Invoke(ctx, "/DataNode_Service/SolicitarNombre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataNode_ServiceServer is the server API for DataNode_Service service.
// All implementations must embed UnimplementedDataNode_ServiceServer
// for forward compatibility
type DataNode_ServiceServer interface {
	// OMS Manda tupla (id, nombre)
	MandarId(context.Context, *TuplaId) (*Confirmar, error)
	// OMS solicita nombre segun id
	SolicitarNombre(context.Context, *Identificador) (*Nombre, error)
	mustEmbedUnimplementedDataNode_ServiceServer()
}

// UnimplementedDataNode_ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataNode_ServiceServer struct {
}

func (UnimplementedDataNode_ServiceServer) MandarId(context.Context, *TuplaId) (*Confirmar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MandarId not implemented")
}
func (UnimplementedDataNode_ServiceServer) SolicitarNombre(context.Context, *Identificador) (*Nombre, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolicitarNombre not implemented")
}
func (UnimplementedDataNode_ServiceServer) mustEmbedUnimplementedDataNode_ServiceServer() {}

// UnsafeDataNode_ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataNode_ServiceServer will
// result in compilation errors.
type UnsafeDataNode_ServiceServer interface {
	mustEmbedUnimplementedDataNode_ServiceServer()
}

func RegisterDataNode_ServiceServer(s grpc.ServiceRegistrar, srv DataNode_ServiceServer) {
	s.RegisterService(&DataNode_Service_ServiceDesc, srv)
}

func _DataNode_Service_MandarId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TuplaId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNode_ServiceServer).MandarId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataNode_Service/MandarId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNode_ServiceServer).MandarId(ctx, req.(*TuplaId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_Service_SolicitarNombre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identificador)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNode_ServiceServer).SolicitarNombre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataNode_Service/SolicitarNombre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNode_ServiceServer).SolicitarNombre(ctx, req.(*Identificador))
	}
	return interceptor(ctx, in, info, handler)
}

// DataNode_Service_ServiceDesc is the grpc.ServiceDesc for DataNode_Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataNode_Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DataNode_Service",
	HandlerType: (*DataNode_ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MandarId",
			Handler:    _DataNode_Service_MandarId_Handler,
		},
		{
			MethodName: "SolicitarNombre",
			Handler:    _DataNode_Service_SolicitarNombre_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messages.proto",
}
